{"version":3,"sources":["util.js","Table.js","Roller.js","App.js","index.js"],"names":["isIncluded","exclusionList","headerValue","indexOf","TableHeader","_ref","header","excludeCols","react_default","a","createElement","filter","map","value","i","key","TableRow","_ref2","row","_","Table","_this$props","this","props","body","className","Table_TableHeader","Table_TableRow","Component","DICE_NOTATION_REGEX","matchDiceNotation","item","match","rollValue","notation","droll","roll","total","RollerResult","rolls","_ref3","Object","slicedToArray","Roller","state","results","rollerType","rollerDice","diceRollRequest","find","concat","length","getRow","_ref4","Math","max","getRowForRoll","_ref6","_ref7","toConsumableArray","setState","_this2","_this$props$maxResult","maxResults","onClick","slice","reverse","Roller_RollerResult","csvParser","options","arguments","undefined","cast","input","Promise","resolve","reject","parse","err","output","fetchCsvData","asyncToGenerator","regenerator_default","mark","_callee","url","data","text","parsedData","wrap","_context","prev","next","fetch","sent","abrupt","stop","_x","apply","Loader","App","isLoading","then","includeTable","includeRoller","_this$state","src_Roller","src_Table","App_Loader","document","querySelectorAll","forEach","node","dataset","csvUrl","csvTable","csvRoller","csvExclude","split","val","trim","csvRollerType","csvRollerDice","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.2ad3b12d.chunk.js","sourcesContent":["\nexport const isIncluded = (exclusionList) => (headerValue) => {\n    if (!exclusionList) return true;\n    return exclusionList.indexOf(headerValue) === -1\n};\n","import React, { Component } from 'react';\nimport { isIncluded } from './util';\n\nconst TableHeader = ({ header, excludeCols }) => (\n    <tr>\n        {header\n            .filter(isIncluded(excludeCols))\n            .map((value, i) => <th key={i}>{value}</th>)}\n    </tr>\n);\n\nconst TableRow = ({ row, header, excludeCols }) => (\n    <tr>\n        {row\n            .filter((_, i) => isIncluded(excludeCols)(header[i]))\n            .map((value, i) => <td key={i}>{value}</td>)}\n    </tr>\n);\n\nclass Table extends Component {\n    render() {\n        const { header, body, excludeCols } = this.props;\n\n        return (\n            <div className=\"csv-table\">\n                <table>\n                    <tbody>\n                        <TableHeader header={header} excludeCols={excludeCols} />\n                        {body.map((row, i) => (\n                            <TableRow key={i} row={row} header={header} excludeCols={excludeCols} />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport droll from 'droll';\nimport { isIncluded } from './util';\n\nconst DICE_NOTATION_REGEX = /(\\d*d[/x+\\d]+)/i;\nconst matchDiceNotation = (item) => item.match(DICE_NOTATION_REGEX);\n\nconst rollValue = (notation) => {\n    const roll = droll.roll(notation);\n    return roll.total;\n};\n\nconst RollerResult = ({ rolls, body }) => (\n    <div className=\"results\">\n        {rolls.map(([header, value], i) => (\n            <span key={i}>\n                <strong>{header}: </strong>\n                {value}\n                {' '}\n            </span>\n        ))}\n    </div>\n);\n\nconst getRowForRoll = (body) => (roll) => {\n    const firstValue = body[0][0];\n\n    if (typeof firstValue == 'number') {\n        return body.find(([numberCol]) => numberCol === roll);\n    }\n\n    return body[Math.max(roll - 1, body.length - 1)];\n};\n\nclass Roller extends Component {\n    state = { results: [] }\n\n    roll() {\n        const { body, header, rollerType, rollerDice, excludeCols } = this.props;\n\n        const diceRollRequest = rollerDice || header.find(matchDiceNotation) || `1d${body.length}`;\n\n        let rolls = [];\n\n        const getRow = getRowForRoll(body);\n\n        if (rollerType === \"linked\") {\n            const roll = rollValue(diceRollRequest);\n\n            rolls = header.map((header, i) => [header, getRow(roll)[i]]);\n        } else {\n            rolls = header.map((header, i) => [header, getRow(rollValue(diceRollRequest))[i]]);\n        }\n\n        rolls = rolls.filter(([header, _]) => isIncluded(excludeCols)(header))\n\n        const results = [...this.state.results, rolls];\n\n        this.setState({ results })\n    }\n\n    render() {\n        const { maxResults = 1 } = this.props;\n        const { results } = this.state;\n\n        return (\n            <div className=\"csv-roller\">\n                <button onClick={() => this.roll()}>Roll</button>\n\n                <div className=\"csv-roller-results\">\n                    {results.slice(-maxResults).reverse().map((rolls, i) => (\n                        <RollerResult key={i + rolls[0]} rolls={rolls} />\n                    ))}\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Roller;\n","import React, { Component } from 'react';\nimport parse from 'csv-parse';\n\nimport Table from './Table';\nimport Roller from './Roller';\n\nconst csvParser = (options = { cast: true }) => (input) => new Promise((resolve, reject) => {\n    parse(input, options, (err, output) => {\n        if (err) return reject(err);\n        resolve(output);\n    });\n});\n\nconst fetchCsvData = async (url) => {\n    const data = await fetch(url);\n    const text = await data.text();\n    const parsedData = await csvParser()(text);\n\n    return parsedData;\n}\n\nconst Loader = () => (\n    <div className=\"loader\">Loading...</div>\n);\n\nclass App extends Component {\n    state = { isLoading: true }\n\n    componentDidMount() {\n        const { url } = this.props;\n\n        fetchCsvData(url).then((data) => this.setState({\n            isLoading: false,\n            header: data[0],\n            body: data.slice(1),\n        }));\n    }\n\n    render() {\n        const { includeTable, includeRoller, rollerType, rollerDice, excludeCols } = this.props;\n        const { isLoading, header, body } = this.state;\n\n        if (isLoading || !header || !body || body.length === 0) return <Loader />;\n\n        return [\n            includeRoller && (\n                <Roller key=\"roller\"\n                    header={header}\n                    body={body}\n                    rollerType={rollerType}\n                    rollerDice={rollerDice}\n                    excludeCols={excludeCols} />\n            ),\n            includeTable && (\n                <Table key=\"table\"\n                    header={header}\n                    body={body}\n                    excludeCols={excludeCols} />\n            )\n        ];\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst renderTableTo = document.querySelectorAll('[data-csv-url]')\n\nrenderTableTo.forEach((node) => {\n    const url = node.dataset.csvUrl;\n    const includeTable = node.dataset.csvTable === \"true\";\n    const includeRoller = node.dataset.csvRoller === \"true\";\n    const excludeCols = node.dataset.csvExclude && node.dataset.csvExclude.split(',').map(val => val.trim());\n    const rollerType = node.dataset.csvRollerType || \"linked\";\n    const rollerDice = node.dataset.csvRollerDice;\n\n    ReactDOM.render(\n        <App url={url}\n            includeTable={includeTable}\n            includeRoller={includeRoller}\n            rollerType={rollerType}\n            rollerDice={rollerDice}\n            excludeCols={excludeCols} />,\n    node);\n});\n\n// ReactDOM.render(<App url={url} />, document.getElementById('root'));\n"],"sourceRoot":""}